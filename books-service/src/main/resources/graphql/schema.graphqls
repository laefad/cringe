schema {
    query: Query
    mutation: Mutation
}

type UserBookDetails {
    username: String!
    books: [Book!]
    tagLists: [TagList!]
}

type TagList {
    userBookDetails: UserBookDetails!
    book: Book!
    tags: [Tag!]
}

type Author {
    id: ID!
    name: String!
    surname: String!
    middlename: String
    description: String
    birthDate: Date
    deathDate: Date
    books: [Book!]
}

type Book {
    id: ID!
    name: String!
    description: String
    publicationDate: Date
    authors: [Author!]
    usersBookDetails: [UserBookDetails!]!
    path: String!
    tagLists: [TagList!]
}

type Tag {
    id: ID!
    name: String!
}

input TagCreateInput {
    name: String!
}

# input TagListInput {
#     username: String!
#     bookId: ID!
#     name: String!
# }

# input TagListInput {
#     username: String!
#     bookId: ID!
# }

###################
# Book
###################

# type BookQuery {
#     getAll(): [Book!]
# }

# type Query {
#     getUserByLogin(login: String!): User
#     getUser(id: ID!): User
# }

type Query {
    # TAG 
    getTag(tagId: ID!): Tag
    getAllTags: [Tag!]
}

type Mutation {
    # TAG
    deleteTag(tagId: ID!): Tag
    createTag(input: TagCreateInput!): Tag
}

scalar Date
